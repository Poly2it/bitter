//  Copyright 2023 PolyBit
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

//  Copyright 2022 aspizu
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy of this
//  software and associated documentation files (the "Software"), to deal in the Software
//  without restriction, including without limitation the rights to use, copy, modify,
//  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
//  permit persons to whom the Software is furnished to do so, subject to the following
//  conditions:
//  
//  The above copyright notice and this permission notice shall be included in all copies or
//  substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
//  PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
//  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
//  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//  OTHER DEALINGS IN THE SOFTWARE.

start: declr*

declr: "costumes" _stringlist ";" -> declr_costumes
     | "use" STRING ";" -> declr_use
     | "globals" _namelist ";" -> declr_globals
     | "listglobals" _namelist ";" -> declr_listglobals
     | "datalist" NAME STRING ";" -> datalist
     | "def" NAME _namelist stack -> declr_function
     | "nowarp" "def" NAME _namelist stack -> declr_function_nowarp
     | "on" STRING stack -> declr_on
     | "onflag" stack -> declr_onflag
     | "onkey" STRING stack -> declr_onkey
     | "onclick" stack -> declr_onclick
     | "onbackdrop" STRING stack -> declr_onbackdrop
     | "onloudness" expr stack -> declr_onloudness
     | "ontimer" expr stack -> declr_ontimer
     | "onclone" stack -> declr_onclone
     | "macro" NAME _namelist "->" expr ";" -> declr_macro
     | LCOMMENT -> declr_comment

stack: "{" block* "}"

block: NAME "=" expr ";" -> varset
     | "local"  NAME "=" expr ";" -> localvar
     | NAME "+=" expr ";" -> varchange
     | NAME "-=" expr ";" -> varsub
     | NAME "*=" expr ";" -> varmul
     | NAME "/=" expr ";" -> vardiv
     | NAME "%=" expr ";" -> varmod
     | NAME "&=" expr ";" -> varjoin
     | "if" expr stack -> block_if
     | "if" expr stack "else" stack -> block_if_else
     | "if" expr stack ("elif" expr stack)+ -> block_if_elif
     | "if" expr stack ("elif" expr stack)+ "else" stack -> block_if_elif_else
     | "until" expr stack -> until
     | "forever" stack -> forever
     | "repeat" expr stack -> repeat
     | NAME "[" "]" ";" -> listset
     | NAME ".add" expr ";" -> listadd
     | NAME ".delete" expr ";" -> listdelete
     | NAME ".insert" expr "," expr ";" -> listinsert
     | NAME "[" expr "]" "=" expr ";" -> listreplace
     | NAME "[" expr "]" "+=" expr ";" -> listreplaceadd
     | NAME "[" expr "]" "-=" expr ";" -> listreplacesub
     | NAME "[" expr "]" "*=" expr ";" -> listreplacemul
     | NAME "[" expr "]" "/=" expr ";" -> listreplacediv
     | NAME "[" expr "]" "%=" expr ";" -> listreplacemod
     | NAME "[" expr "]" "&=" expr ";" -> listreplacejoin
     | NAME ".show" ";" -> listshow
     | NAME ".hide" ";" -> listhide
     | "..." -> nop
     | NAME _exprlist ";" [LCOMMENT]

expr: "(" expr ")"
    | STRING | NUMBER | FLOAT
    | ARGUMENT -> argument
    | MACROVAR -> macrovar
    | NAME "(" _exprlist ")" -> reporter
    | MACROVAR "(" _exprlist ")" -> macro
    | "not" expr -> notop
    | expr "and" expr -> andop
    | expr "or" expr -> orop
    | expr "=" expr -> eq
    | expr ">" expr -> gt
    | expr "<" expr -> lt
    | expr "+" expr -> add
    | expr "-" expr -> sub
    | expr "*" expr -> mul
    | expr "/" expr -> div
    | expr "%" expr -> mod
    | expr "&" expr -> join
    | "-" expr -> minus
    | NAME "[" expr "]" -> listitem
    | NAME ".index" "(" expr ")" -> listindex
    | NAME ".contains" "(" expr ")" -> listcontains
    | NAME ".length" -> listlength
    | VARIABLE -> var

_exprlist: [expr ("," expr)*]
_stringlist: [STRING ("," STRING)*]
_namelist: [NAME ("," NAME)*]

MACROVAR: /\![_a-zA-Z][_a-zA-Z0-9]*/
ARGUMENT: /\$[_a-zA-Z][_a-zA-Z0-9]*/
VARIABLE: (NAME "." NAME) | NAME
NAME: /[_a-zA-Z][_a-zA-Z0-9]*/
STRING: /"([^"\\]|\\.)*"/
NUMBER: /-?[0-9]+/
FLOAT: /-?[0-9]+\.[0-9]+/

COMMENT: /\/\*(\*(?!\/)|[^*])*\*\//
LCOMMENT: "(*" /(.|\n)+/ "*)"
%ignore " "
%ignore "\n"
%ignore "\t"
%ignore COMMENT